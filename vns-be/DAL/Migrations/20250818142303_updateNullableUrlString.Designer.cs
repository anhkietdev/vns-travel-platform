// <auto-generated />
using System;
using DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250818142303_updateNullableUrlString")]
    partial class updateNullableUrlString
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Models.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BookingReference")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("BookingStatus")
                        .HasColumnType("int");

                    b.Property<int>("BookingType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DepositAmount")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("RemainingAmount")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("SpecialRequests")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(15,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookingId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DAL.Models.Combo", b =>
                {
                    b.Property<Guid>("ComboId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentBookings")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountedPrice")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("MaxBookings")
                        .HasColumnType("int");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(15,2)");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("ComboId");

                    b.HasIndex("PartnerId");

                    b.ToTable("Combos");
                });

            modelBuilder.Entity("DAL.Models.ComboItem", b =>
                {
                    b.Property<Guid>("ComboItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComboId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IncludedFeatures")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SequenceOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.HasKey("ComboItemId");

                    b.HasIndex("ComboId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceId1");

                    b.ToTable("ComboItems");
                });

            modelBuilder.Entity("DAL.Models.FinancialReport", b =>
                {
                    b.Property<Guid>("FinancialReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("NetRevenue")
                        .HasColumnType("decimal(15,2)");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PlatformFees")
                        .HasColumnType("decimal(15,2)");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalRefund")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("TotalRevenue")
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("FinancialReportId");

                    b.HasIndex("PartnerId");

                    b.ToTable("FinancialReports");
                });

            modelBuilder.Entity("DAL.Models.HomestayAvailability", b =>
                {
                    b.Property<Guid>("AvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HomestayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("MinNights")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AvailabilityId");

                    b.HasIndex("HomestayId");

                    b.HasIndex("RoomId");

                    b.ToTable("HomestayAvailabilities");
                });

            modelBuilder.Entity("DAL.Models.HomestayBooking", b =>
                {
                    b.Property<Guid>("HomestayBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Adults")
                        .HasColumnType("int");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookingType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Children")
                        .HasColumnType("int");

                    b.Property<decimal>("CleaningFee")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("HomestayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HostApprovalRequired")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("HostApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Nights")
                        .HasColumnType("int");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("RoomRate")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("ServiceFee")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalAccommodationCost")
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("HomestayBookingId");

                    b.HasIndex("BookingId");

                    b.HasIndex("HomestayId");

                    b.HasIndex("RoomId");

                    b.ToTable("HomestayBookings");
                });

            modelBuilder.Entity("DAL.Models.HomestayRoom", b =>
                {
                    b.Property<Guid>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("BedCount")
                        .HasColumnType("int");

                    b.Property<string>("BedType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("HolidayPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("HomestayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("MaxOccupancy")
                        .HasColumnType("int");

                    b.Property<bool>("PrivateBathroom")
                        .HasColumnType("bit");

                    b.Property<string>("RoomAmenities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("RoomSizeSqm")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("WeekendPrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("RoomId");

                    b.HasIndex("HomestayId");

                    b.ToTable("HomestayRooms");
                });

            modelBuilder.Entity("DAL.Models.HomestayService", b =>
                {
                    b.Property<Guid>("HomestayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Amenities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CancellationPolicy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("CheckInTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("CheckOutTime")
                        .HasColumnType("time");

                    b.Property<int>("HomestayType")
                        .HasColumnType("int");

                    b.Property<string>("HostInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseRules")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyType")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HomestayId");

                    b.HasIndex("ServiceId")
                        .IsUnique();

                    b.ToTable("HomestayServices");
                });

            modelBuilder.Entity("DAL.Models.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(10,8)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(11,8)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OpeningHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("DAL.Models.Message", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MessageId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DAL.Models.OtpCode", b =>
                {
                    b.Property<int>("OtpCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OtpCodeId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("datetime2");

                    b.HasKey("OtpCodeId");

                    b.ToTable("OtpCodes");
                });

            modelBuilder.Entity("DAL.Models.Partner", b =>
                {
                    b.Property<Guid>("PartnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessCategory")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BusinessLicenseNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<decimal>("PlatformFeePercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("PlatformFeeType")
                        .HasColumnType("int");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VerificationStatus")
                        .HasColumnType("int");

                    b.HasKey("PartnerId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("DAL.Models.PartnerDocument", b =>
                {
                    b.Property<Guid>("PartnerDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DocumentUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerifiedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("PartnerDocumentId");

                    b.HasIndex("PartnerId");

                    b.ToTable("PartnerDocuments");
                });

            modelBuilder.Entity("DAL.Models.PartnerLocation", b =>
                {
                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.HasKey("PartnerId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("PartnerLocations");
                });

            modelBuilder.Entity("DAL.Models.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(15,2)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("RefundReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefundedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("PaymentId");

                    b.HasIndex("BookingId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DAL.Models.Refund", b =>
                {
                    b.Property<Guid>("RefundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProcessedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("RefundReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RefundStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("RefundId");

                    b.HasIndex("BookingId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Refunds");
                });

            modelBuilder.Entity("DAL.Models.Revenue", b =>
                {
                    b.Property<Guid>("RevenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<decimal>("NetEarnings")
                        .HasColumnType("decimal(15,2)");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PlatformFee")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalEarnings")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("RevenueId");

                    b.HasIndex("PartnerId");

                    b.ToTable("Revenues");
                });

            modelBuilder.Entity("DAL.Models.SavedLocation", b =>
                {
                    b.Property<Guid>("SavedLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AliasName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SavedLocationId");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("SavedLocations");
                });

            modelBuilder.Entity("DAL.Models.Service", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PartnerId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("DAL.Models.ServiceFeedback", b =>
                {
                    b.Property<Guid>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CleanlinessRating")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationRating")
                        .HasColumnType("int");

                    b.Property<int>("OverallRating")
                        .HasColumnType("int");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ServiceRating")
                        .HasColumnType("int");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ValueRating")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("BookingId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceId1");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceFeedbacks");
                });

            modelBuilder.Entity("DAL.Models.ServicePromotion", b =>
                {
                    b.Property<Guid>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Conditions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentUsage")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxUsage")
                        .HasColumnType("int");

                    b.Property<int>("PromotionType")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PromotionId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServicePromotions");
                });

            modelBuilder.Entity("DAL.Models.ServiceRating", b =>
                {
                    b.Property<Guid>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AverageRating")
                        .HasColumnType("decimal(3,2)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RatingBreakdown")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.Property<int>("TotalReviews")
                        .HasColumnType("int");

                    b.HasKey("RatingId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceRatings");
                });

            modelBuilder.Entity("DAL.Models.TourBooking", b =>
                {
                    b.Property<Guid>("TourBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ParticipantDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Participants")
                        .HasColumnType("int");

                    b.Property<string>("PickupLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<TimeSpan?>("PickupTime")
                        .HasColumnType("time");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TourBookingId");

                    b.HasIndex("BookingId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("TourBookings");
                });

            modelBuilder.Entity("DAL.Models.TourItinerary", b =>
                {
                    b.Property<Guid>("ItineraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("StepOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ItineraryId");

                    b.HasIndex("TourId");

                    b.ToTable("TourItineraries");
                });

            modelBuilder.Entity("DAL.Models.TourSchedule", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailableSlots")
                        .HasColumnType("int");

                    b.Property<int>("BookedSlots")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("GuideId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MeetingPoint")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("TourDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TourId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ScheduleId");

                    b.HasIndex("TourId");

                    b.ToTable("TourSchedules");
                });

            modelBuilder.Entity("DAL.Models.TourService", b =>
                {
                    b.Property<Guid>("TourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AgeRestrictions")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CancellationPolicy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<int>("DurationHours")
                        .HasColumnType("int");

                    b.Property<string>("Excludes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FitnessRequirements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Includes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<int>("MinParticipants")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TourType")
                        .HasColumnType("int");

                    b.Property<string>("WhatToBring")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TourId");

                    b.HasIndex("ServiceId")
                        .IsUnique();

                    b.ToTable("TourServices");
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DAL.Models.UserBankAccount", b =>
                {
                    b.Property<Guid>("BankAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountHolderName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BankAccountId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBankAccounts");
                });

            modelBuilder.Entity("DAL.Models.Vehicle", b =>
                {
                    b.Property<Guid>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LittersPer100Km")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Seats")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransmissionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VehicleCategoryCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("VehicleId");

                    b.HasIndex("VehicleCategoryCategoryId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("DAL.Models.VehicleCategory", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RentalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId");

                    b.HasIndex("RentalId");

                    b.ToTable("VehicleCategory");
                });

            modelBuilder.Entity("DAL.Models.VehicleRentalBooking", b =>
                {
                    b.Property<Guid>("VehicleRentalBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookingStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("DepositPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DriverIdentification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DriverRequired")
                        .HasColumnType("bit");

                    b.Property<string>("PickupLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RentalEndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RentalHours")
                        .HasColumnType("int");

                    b.Property<DateTime>("RentalStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReturnLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VehicleRentalBookingId");

                    b.HasIndex("BookingId");

                    b.ToTable("VehicleRentalBookings");
                });

            modelBuilder.Entity("DAL.Models.VehicleRentalService", b =>
                {
                    b.Property<Guid>("RentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessLicense")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("CleaningFee")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("DeliveryAvailable")
                        .HasColumnType("bit");

                    b.Property<decimal>("EstimatedFuelConsumption")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("FuelPolicy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("FuelTankCapacity")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("InsurancePolicy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("LateReturnFeePerHour")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("MaxRentalDays")
                        .HasColumnType("int");

                    b.Property<int>("MinRentalHours")
                        .HasColumnType("int");

                    b.Property<string>("OperatingHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PickupLocations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RentalType")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("SmokingPenalty")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("RentalId");

                    b.HasIndex("ServiceId")
                        .IsUnique();

                    b.ToTable("VehicleRentalServices");
                });

            modelBuilder.Entity("DAL.Models.Voucher", b =>
                {
                    b.Property<Guid>("VoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CurrentUsage")
                        .HasColumnType("int");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<int>("MaxUsage")
                        .HasColumnType("int");

                    b.Property<string>("ServiceTypes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("VoucherCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VoucherId");

                    b.HasIndex("UserId");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("DAL.Models.Booking", b =>
                {
                    b.HasOne("DAL.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.Combo", b =>
                {
                    b.HasOne("DAL.Models.Partner", "Partner")
                        .WithMany("Combos")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("DAL.Models.ComboItem", b =>
                {
                    b.HasOne("DAL.Models.Combo", "Combo")
                        .WithMany("ComboItems")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Models.Service", null)
                        .WithMany("ComboItems")
                        .HasForeignKey("ServiceId1");

                    b.Navigation("Combo");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DAL.Models.FinancialReport", b =>
                {
                    b.HasOne("DAL.Models.Partner", "Partner")
                        .WithMany("FinancialReports")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("DAL.Models.HomestayAvailability", b =>
                {
                    b.HasOne("DAL.Models.HomestayService", "HomestayService")
                        .WithMany("HomestayAvailabilities")
                        .HasForeignKey("HomestayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Models.HomestayRoom", "HomestayRoom")
                        .WithMany("HomestayAvailabilities")
                        .HasForeignKey("RoomId");

                    b.Navigation("HomestayRoom");

                    b.Navigation("HomestayService");
                });

            modelBuilder.Entity("DAL.Models.HomestayBooking", b =>
                {
                    b.HasOne("DAL.Models.Booking", "Booking")
                        .WithMany("HomestayBookings")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.HomestayService", "HomestayService")
                        .WithMany("HomestayBookings")
                        .HasForeignKey("HomestayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Models.HomestayRoom", "HomestayRoom")
                        .WithMany("HomestayBookings")
                        .HasForeignKey("RoomId");

                    b.Navigation("Booking");

                    b.Navigation("HomestayRoom");

                    b.Navigation("HomestayService");
                });

            modelBuilder.Entity("DAL.Models.HomestayRoom", b =>
                {
                    b.HasOne("DAL.Models.HomestayService", "HomestayService")
                        .WithMany("HomestayRooms")
                        .HasForeignKey("HomestayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HomestayService");
                });

            modelBuilder.Entity("DAL.Models.HomestayService", b =>
                {
                    b.HasOne("DAL.Models.Service", "Service")
                        .WithOne("HomestayService")
                        .HasForeignKey("DAL.Models.HomestayService", "ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DAL.Models.Partner", b =>
                {
                    b.HasOne("DAL.Models.User", "User")
                        .WithOne("Partner")
                        .HasForeignKey("DAL.Models.Partner", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.PartnerDocument", b =>
                {
                    b.HasOne("DAL.Models.Partner", "Partner")
                        .WithMany("Documents")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("DAL.Models.PartnerLocation", b =>
                {
                    b.HasOne("DAL.Models.Location", "Location")
                        .WithMany("PartnerLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Partner", "Partner")
                        .WithMany("PartnerLocations")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("DAL.Models.Payment", b =>
                {
                    b.HasOne("DAL.Models.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("DAL.Models.Refund", b =>
                {
                    b.HasOne("DAL.Models.Booking", "Booking")
                        .WithMany("Refunds")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Payment", "Payment")
                        .WithMany("Refunds")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("DAL.Models.Revenue", b =>
                {
                    b.HasOne("DAL.Models.Partner", "Partner")
                        .WithMany("Revenues")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("DAL.Models.SavedLocation", b =>
                {
                    b.HasOne("DAL.Models.Location", "Location")
                        .WithMany("SavedLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.User", "User")
                        .WithMany("SavedLocations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.Service", b =>
                {
                    b.HasOne("DAL.Models.Location", "Location")
                        .WithMany("Services")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Partner", "Partner")
                        .WithMany("Services")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("DAL.Models.ServiceFeedback", b =>
                {
                    b.HasOne("DAL.Models.Booking", "Booking")
                        .WithMany("ServiceFeedbacks")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Service", null)
                        .WithMany("ServiceFeedbacks")
                        .HasForeignKey("ServiceId1");

                    b.HasOne("DAL.Models.User", "User")
                        .WithMany("ServiceFeedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Partner");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.ServicePromotion", b =>
                {
                    b.HasOne("DAL.Models.Service", "Service")
                        .WithMany("ServicePromotions")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DAL.Models.ServiceRating", b =>
                {
                    b.HasOne("DAL.Models.Location", "Location")
                        .WithMany("ServiceRatings")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Models.Service", "Service")
                        .WithMany("ServiceRatings")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DAL.Models.TourBooking", b =>
                {
                    b.HasOne("DAL.Models.Booking", "Booking")
                        .WithMany("TourBookings")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.TourSchedule", "TourSchedule")
                        .WithMany("TourBookings")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("TourSchedule");
                });

            modelBuilder.Entity("DAL.Models.TourItinerary", b =>
                {
                    b.HasOne("DAL.Models.TourService", "TourService")
                        .WithMany("TourItineraries")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TourService");
                });

            modelBuilder.Entity("DAL.Models.TourSchedule", b =>
                {
                    b.HasOne("DAL.Models.TourService", "TourService")
                        .WithMany("TourSchedules")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TourService");
                });

            modelBuilder.Entity("DAL.Models.TourService", b =>
                {
                    b.HasOne("DAL.Models.Service", "Service")
                        .WithOne("TourService")
                        .HasForeignKey("DAL.Models.TourService", "ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DAL.Models.UserBankAccount", b =>
                {
                    b.HasOne("DAL.Models.User", "User")
                        .WithMany("BankAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.Vehicle", b =>
                {
                    b.HasOne("DAL.Models.VehicleCategory", null)
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleCategoryCategoryId");
                });

            modelBuilder.Entity("DAL.Models.VehicleCategory", b =>
                {
                    b.HasOne("DAL.Models.VehicleRentalService", "VehicleRentalService")
                        .WithMany("VehicleCategories")
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleRentalService");
                });

            modelBuilder.Entity("DAL.Models.VehicleRentalBooking", b =>
                {
                    b.HasOne("DAL.Models.Booking", null)
                        .WithMany("VehicleRentalBookings")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.VehicleRentalService", b =>
                {
                    b.HasOne("DAL.Models.Service", "Service")
                        .WithOne("VehicleRentalService")
                        .HasForeignKey("DAL.Models.VehicleRentalService", "ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DAL.Models.Voucher", b =>
                {
                    b.HasOne("DAL.Models.User", "User")
                        .WithMany("Vouchers")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.Booking", b =>
                {
                    b.Navigation("HomestayBookings");

                    b.Navigation("Payments");

                    b.Navigation("Refunds");

                    b.Navigation("ServiceFeedbacks");

                    b.Navigation("TourBookings");

                    b.Navigation("VehicleRentalBookings");
                });

            modelBuilder.Entity("DAL.Models.Combo", b =>
                {
                    b.Navigation("ComboItems");
                });

            modelBuilder.Entity("DAL.Models.HomestayRoom", b =>
                {
                    b.Navigation("HomestayAvailabilities");

                    b.Navigation("HomestayBookings");
                });

            modelBuilder.Entity("DAL.Models.HomestayService", b =>
                {
                    b.Navigation("HomestayAvailabilities");

                    b.Navigation("HomestayBookings");

                    b.Navigation("HomestayRooms");
                });

            modelBuilder.Entity("DAL.Models.Location", b =>
                {
                    b.Navigation("PartnerLocations");

                    b.Navigation("SavedLocations");

                    b.Navigation("ServiceRatings");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("DAL.Models.Partner", b =>
                {
                    b.Navigation("Combos");

                    b.Navigation("Documents");

                    b.Navigation("FinancialReports");

                    b.Navigation("PartnerLocations");

                    b.Navigation("Revenues");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("DAL.Models.Payment", b =>
                {
                    b.Navigation("Refunds");
                });

            modelBuilder.Entity("DAL.Models.Service", b =>
                {
                    b.Navigation("ComboItems");

                    b.Navigation("HomestayService")
                        .IsRequired();

                    b.Navigation("ServiceFeedbacks");

                    b.Navigation("ServicePromotions");

                    b.Navigation("ServiceRatings");

                    b.Navigation("TourService")
                        .IsRequired();

                    b.Navigation("VehicleRentalService")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.TourSchedule", b =>
                {
                    b.Navigation("TourBookings");
                });

            modelBuilder.Entity("DAL.Models.TourService", b =>
                {
                    b.Navigation("TourItineraries");

                    b.Navigation("TourSchedules");
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("Bookings");

                    b.Navigation("Partner")
                        .IsRequired();

                    b.Navigation("SavedLocations");

                    b.Navigation("ServiceFeedbacks");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("DAL.Models.VehicleCategory", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("DAL.Models.VehicleRentalService", b =>
                {
                    b.Navigation("VehicleCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
